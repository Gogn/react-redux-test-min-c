{"version":3,"sources":["redux/Actions/actionTypes.js","redux/Actions/actions.js","Counter.js","App.js","serviceWorker.js","redux/reducers/counter1.js","redux/reducers/counter2.js","redux/rootReducer.js","index.js"],"names":["ADD","SUB","ADD_NUMBER","ADD2","addNumber","number","type","payload","Counter","style","padding","border","this","props","counter","onClick","onChange","Component","connect","state","counter2","dispatch","add2","App","console","log","className","onAdd","onSub","onAddNumber","onAsyncAdd","counter1","setTimeout","asyncAdd","Boolean","window","location","hostname","match","initialState","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","next","result","getState","reduxThunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6752d33a.chunk.js","sourcesContent":["export const ADD = 'ADD'\nexport const SUB = 'SUB'\nexport const ADD_NUMBER = 'ADD_NUMBER'\nexport const ADD2 = 'ADD2'","import {ADD, ADD2, ADD_NUMBER, SUB} from \"./actionTypes\";\n\n// Action Creators\nexport function add() {\n  return {\n    type: ADD\n  }\n}\n\nexport function sub() {\n  return {\n    type: SUB\n  }\n}\n\nexport function addNumber(number) {\n  return {\n    type: ADD_NUMBER,\n    payload: number\n  }\n}\n\nexport function add2(number) {\n  return {\n    type: ADD2,\n    payload: number\n  }\n}\n\nexport function asyncAdd(number) {\n  return (dispatch) => {\n    setTimeout(() => {\n      dispatch(addNumber(number))\n    }, 1000)\n  }\n}","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {add2} from \"./redux/Actions/actions\";\n\nclass Counter extends Component {\n  render() {\n    return (\n      <div style={{padding: 20, border: '1px solid #ccc'}}>\n        <h1>Второй независимый счетчик {this.props.counter}</h1>\n        <hr/>\n        <div>\n          <button onClick={() => this.props.onChange(1)}>Add</button>\n          <button onClick={() => this.props.onChange(-1)}>Sub</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state){\n  return  {\n    counter: state.counter2.counter2\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onChange: number => dispatch(add2(number))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport './App.css'\nimport Counter from \"./Counter\"\nimport {add, addNumber, asyncAdd, sub} from \"./redux/Actions/actions\";\n\nclass App extends Component {\n\n  // handleInput(event) {\n  //   number: 0,\n  // }\n\n  render() {\n    console.log('APP: props', this.props)\n    return (\n      <div className={'App'}>\n        <h1>Счетчик <strong>{this.props.counter}</strong></h1>\n\n        <hr/>\n\n        <div className=\"Actions\">\n          <button onClick={this.props.onAdd}>Добавить 1</button>\n          <button onClick={this.props.onSub}>Вычесть 1</button>\n          {/*<button onClick={this.props.onSub}>Добавить </button>*/}\n          {/*<input type=\"number\" onChange={event => this.props.onAddNum}/>*/}\n        </div>\n\n        <div className=\"Actions\">\n          <button onClick={() => this.props.onAddNumber(15)}>Добавить 15</button>\n          <button onClick={() => this.props.onAddNumber(-15)}>Вычесть 15</button>\n        </div>\n\n        <div className=\"Actions\">\n          <button onClick={() => this.props.onAsyncAdd(100)}>Асинхронно добавить 100</button>\n        </div>\n\n        <Counter />\n      </div>\n    )\n  }\n}\n\n//Переносим данные из state (rootReducer.js) в props\nfunction mapStateToProps(state) {\n  console.log('APP: state', state)\n  return {\n    counter: state.counter1.counter\n  }\n}\n\n//Функция для манипуляций состоянием store\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onAdd: () => dispatch(add()),\n    onSub: () => dispatch(sub()),\n    onAddNumber: (number) => dispatch(addNumber(number)),\n    onAsyncAdd: (number) => dispatch(asyncAdd(number))\n  }\n}\n\n//Соединение компонентов Реакта с store (index.js)\n//Передача компонента в функцию, которую возвращает connect\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ADD, ADD_NUMBER, SUB} from \"../Actions/actionTypes\";\n\n//Начальное состояние\nconst initialState = {\n  counter: 0\n}\n\n//state по умолчанию - Начальное состояние\nexport default function counter1(state = initialState, action) {\n\n  switch (action.type) {\n    case ADD:\n      return {\n        counter: state.counter + 1\n      }\n    case SUB:\n      return {\n        counter: state.counter - 1\n      }\n    case ADD_NUMBER:\n      return {\n        counter: state.counter + action.payload\n      }\n    default:\n      return state\n  }\n}","import {ADD2} from \"../Actions/actionTypes\";\n\n//Начальное состояние\nconst initialState = {\n  counter2: 200\n}\n\n//state по умолчанию - Начальное состояние\nexport default function counter2(state = initialState, action) {\n\n  switch (action.type) {\n    case ADD2:\n      return {\n        counter2: state.counter2 + action.payload\n      }\n    default:\n      return state\n  }\n}","import {combineReducers} from 'redux'\n\nimport counter1 from \"./reducers/counter1\";\nimport counter2 from \"./reducers/counter2\";\n\nexport default combineReducers({\n  counter1, counter2\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware, compose} from \"redux\";\nimport {Provider} from 'react-redux';\nimport reduxThunk from 'redux-thunk'\nimport rootReducer from \"./redux/rootReducer\";\n\n// function loggerMiddleware(store) {\n//   return function (next) {\n//     return function (action) {\n//       const result = next(action)\n//       console.log('Middleware', store.getState())\n//       return result\n//     }\n//   }\n// }\n\nconst composeEnhancers =\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n    }) : compose;\n\nconst loggerMiddleware = store => next => action => {\n  const result = next(action)\n  console.log('Middleware', store.getState())\n  return result\n}\n\n// Глобальное хранилище данных redux\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(\n  loggerMiddleware, reduxThunk\n)))\n\n//Оборачиваем приложение в Provider, чтобы использовать redux\n//Передаем параметр хранилища\nconst app = (\n  <Provider store={store}>\n    <App/>\n  </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}